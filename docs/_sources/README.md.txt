<br>

[![Python 3.8](https://img.shields.io/badge/python-3.8-orange.svg)](https://www.python.org/downloads/release/python-385/)
[![Python 3.9](https://img.shields.io/badge/python-3.9-blue.svg)](https://www.python.org/downloads/release/python-391/)

###### Platform Supported
![Generic badge](https://img.shields.io/badge/Platform-MacOS-1f425f.svg)

###### Repo Stats
[![GitHub](https://img.shields.io/github/license/thevickypedia/vpn-server)](https://github.com/thevickypedia/vpn-server/blob/main/LICENSE)
[![GitHub repo size](https://img.shields.io/github/repo-size/thevickypedia/vpn-server)](https://api.github.com/repos/thevickypedia/vpn-server)
[![GitHub code size](https://img.shields.io/github/languages/code-size/thevickypedia/vpn-server)](https://api.github.com/repos/thevickypedia/vpn-server)
[![LOC](https://img.shields.io/tokei/lines/github/thevickypedia/vpn-server)](https://api.github.com/repos/thevickypedia/vpn-server)

###### Deployments
[![docs](https://github.com/thevickypedia/vpn-server/actions/workflows/docs.yml/badge.svg)](https://thevickypedia.github.io/vpn-server/)

# VPN Server
Create on demand VPN Server running with `OpenVPN` using `AWS EC2` and `Python`.

### ENV Variables:
Environment variables are loaded from a `.env` file using the `python_dotenv` module.

<details>
<summary><strong>More on Environment variables</strong></summary>

Use [cloudping.info](https://www.cloudping.info/) to pick the fastest (from current location) available region.

**Default args:**<br>
- **AMI_ID_{REGION_NAME}** - AMI ID in a region. Looks for `AMI_ID_us-west-2` since `us-west-2` is the default region.

AMI IDs are got from `OpenVPN Access Server Community Images` per region.

**Additional args:**<br>
- **VPN_PASSWORD** - Password to access VPN Server once, configuration is done. Defaults to `awsVPN2021`
- **REGION_NAME** - Region where the VPN Server should live. Defaults to `us-west-2`

Optionally `env vars` for AWS config (`ACCESS_KEY`, `SECRET_KEY`, `REGION_NAME`) can be setup.
</details>

### Setup and Configuration
1. `git clone https://github.com/thevickypedia/vpn-server.git`
2. `cd vpn-server && python3 -m venv venv`
3. `source venv/bin/activate`
4. `pip install -r requirements.txt`
5. Trigger VPN Server - Can be run only via `commandline` since, the script requires arguments as follows.
   - `python vpn.py START` to initiate the `VPN Server`
   - `python vpn.py STOP` to delete all resource spun up for the `VPN Server`
6. `Runtime: ~3 minutes`

### Windows Operating System (Manual Configuration)

Currently, the autoconfiguration works only on `MacOS`. Alternatively, do the following after the script completes:

1. Open the `server_info.json` file. (generated by the script)
2. Run the value of key: `initial_config` in command prompt.
3. Enter `yes` to accept the certificate when prompted.
   - `Are you sure you want to continue connecting (yes/no)?`
4. Enter `yes` to accept the agreement when prompted.
   - `Please enter 'yes' to indicate your agreement [no]: `
5. Hit `Enter/Return` for rest of the prompts.
6. Run the value of key: `final_config` in command prompt.
7. At last run `sudo passwd openvpn` to reset the password.
8. To perform the `Routing` changes:
   - Login to the server url found as value for key: `SERVER` with username: `openvpn` and accept the agreement.
   - Navigate to `CONFIGURATION` in the left pane -> `VPN Settings` and Scroll Down to `Routing`.
   - Slide `Should client Internet traffic be routed through the VPN?` switch to `Yes`
   - Click `Save Settings` (bottom of page) and `Update Running Server` (top of page)
9. Download the `OpenVPN` application and get connected to the VPN server.

### AWS Resources Used
- EC2
  - Instances
  - AMI
  - KeyPairs
  - SecurityGroups
- Network Interfaces
- VPC [Default]
- Subnet [Default]

### Linting
`PreCommit` will ensure linting, and the doc creation are run on every commit.

Requirement:
<br>
`pip install --no-cache --upgrade sphinx pre-commit recommonmark`

Usage:
<br>
`pre-commit run --all-files`

### Limitations
- Currently, the final autoconfiguration works only on `MacOS`
- This is because, the script uses the in built mac application: `applescript` to run interactive `SSH` commands.
  - Heads up: This can be done in Windows using `PowerShell` and `plink`
- There is an over provisioned wait time for few AWS interactions.

### Links
[Repository](https://github.com/thevickypedia/vpn-server)

[Runbook](https://thevickypedia.github.io/vpn-server/)

## License & copyright

&copy; Vignesh Sivanandha Rao

Licensed under the [MIT License](https://github.com/thevickypedia/vpn-server/blob/main/LICENSE)
